datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

model Account {
    id                       String   @id @default(cuid())
    createdAt                DateTime @default(now())
    updatedAt                DateTime @default(now()) @updatedAt
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String   @map("provider_account_id")
    refresh_token            String?  @db.Text
    refresh_token_expires_in Int?
    access_token             String?  @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum Role {
    USER
    ADMIN
}

model User {
    id        String   @id @unique @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)

    stripe_customer_id String? @unique

    billing_address Json?
    payment_method  Json?

    subscriptions Subscription[]
    accounts      Account[]
    sessions      Session[]
    keys          ApiKey[]
    payments      Payment[]
    Request       Request[]

    @@index([id])
}

model ApiKey {
    id        String   @id @unique @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    name         String?
    sensitive_id String? @unique
    hashed_key   String  @unique

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([id])
    @@index([userId])
}

model Subscription {
    id                   String   @id
    status               String?
    metadata             Json?
    price_id             String?
    quantity             Int?
    cancel_at_period_end Boolean?
    created              String
    current_period_start String
    current_period_end   String
    ended_at             String?
    cancel_at            String?
    canceled_at          String?
    trial_start          String?
    trial_end            String?

    User   User?   @relation(fields: [userId], references: [id])
    userId String?

    @@index([userId])
}

model Payment {
    id        String   @id @unique @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    amount      Int
    currency    String?
    status      String?
    metadata    Json?
    created     String
    canceled_at String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([id])
    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Request {
    id String @id @unique @default(uuid())

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    openai_id String
    metadata  Metadata[]

    ip       String
    url      String
    method   String
    status   Int
    cached   Boolean @default(false)
    streamed Boolean @default(false)
    user_id  String? // ID of the user passed in through header

    model             String?
    prompt_tokens     Int?
    completion_tokens Int?

    request_headers  Json
    request_body     Json
    response_headers Json

    response_body          Json?
    streamed_response_body String? @db.Text

    completion String? @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Metadata {
    id String @id @unique @default(uuid())

    key   String
    value String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Request   Request? @relation(fields: [requestId], references: [id])
    requestId String?

    @@index([requestId])
}
